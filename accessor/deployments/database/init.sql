-- create database asker;
-- use asker;

-- create table chat_tb (
--     id serial primary key,
--     tid numeric(20, 0) unique,
--     chat varchar(128), 
--     add_date timestamp not null default now()
-- );

-- create table ask_tb (
--     id serial primary key,
--     head text, 
--     sub varchar(64)[], 
--     cid integereger[],
--     res jsonb,
--     stat boolean,
--     is_pub boolean,
--     access_to_show boolean,
--     has_deadline boolean,
--     deadline timestamp default null,
--     photo bytea,
--     add_date timestamp not null default now()
-- );

-- create table active_tb (
--     id serial primary key,
--     cid integereger REFERENCES chat_tb(id) on delete cascade on update cascade,
--     aid integereger REFERENCES ask_tb(id) on delete cascade on update cascade,
--     mid integereger,
--     res jsonb,
--     stat boolean,
--     add_date timestamp not null default now()
-- );

create table last_month (
    id serial primary key,
    goods varchar(128),
    count_sku integer,
    count_sku_mov integer,
    count_sku_sale integer,
    percent_sku_sale numeric(10,2),
    count_sellers integer,
    sellers_sell integer,
    percent_sellers_sell numeric(10,2),
    percent_repurch_orders numeric(10,2),
    revenuy_excluding_repurch varchar(128),
    revenuy_including_repurch varchar(128),
    potencial_revenue varchar(128),
    lost_revenue varchar(128),
    percent_lost_revenue integer,
    order_without_revenue varchar(128),
    sales_with_revenue varchar(128),
    remains varchar(128),
    turnover numeric(10,2),
    avr_revenue varchar(128),
    avr_price integer,
    cost_of_sale varchar(128),
    commiss_wb_with_repurch varchar(128),
    taxes varchar(128),
    profit varchar(128),
    percent_profit_revenue numeric(10,2),
    percent_profit_cost_of_sale numeric(10,2),
    percent_profit_cost_of_sale_in numeric(10,2),
    commission integer,
    avr_count_comments numeric(10,2),
    avr_rates_evalution numeric(10,2),
    weight_percent_profit_cost_of_sale integer,
    weight_percent_profit_cost_of_attach integer,
    weight_percent_profit_revenue integer,
    weight_revenue integer,
    weight_percent_sku numeric(10,2),
    weight_percent_sellers integer,
    weight_ranks integer,
    weight_count_comments numeric(10,2),
    weight_turnover integer,
    weight_lost_revenue integer,
    weight_total_sum integer,
    rank integer
);

create table next_season(
    id serial primary key,
    goods varchar(128),
    count_sku integer,
    count_sku_mov integer,
    count_sku_sale integer,
    percent_sku_sale numeric(10,2),
    count_sellers integer,
    sellers_sell integer,
    percent_sellers_sell numeric(10,2),
    percent_repurch_orders numeric(10,2),
    revenuy_excluding_repurch varchar(128),
    revenuy_including_repurch varchar(128),
    potencial_revenue varchar(128),
    lost_revenue varchar(128),
    percent_lost_revenue integer,
    order_without_revenue varchar(128),
    sales_with_revenue varchar(128),
    remains varchar(128),
    turnover numeric(10,2),
    avr_revenue varchar(128),
    avr_price integer,
    cost_of_sale varchar(128),
    commiss_wb_with_repurch varchar(128),
    taxes varchar(128),
    profit varchar(128),
    percent_profit_revenue numeric(10,2),
    percent_profit_cost_of_sale numeric(10,2),
    percent_profit_cost_of_sale_in numeric(10,2),
    commission integer,
    avr_count_comments numeric(10,2),
    avr_rates_evalution numeric(10,2),
    weight_percent_profit_cost_of_sale integer,
    weight_percent_profit_cost_of_attach integer ,
    weight_percent_profit_revenue integer ,
    weight_revenue integer ,
    weight_percent_sku numeric(10,2),
    weight_percent_sellers integer ,
    weight_ranks integer ,
    weight_count_comments numeric(10,2),
    weight_turnover integer,
    weight_lost_revenue integer ,
    weight_total_sum integer ,
    rank integer,
);

create table user(
    telegram_id integer ,
    username varchar ,
    language varchar,
    is_subscribe boolean,
    is_banned  boolean,
    is_admin boolean, 
    is_push_maker boolean,
    is_respondent boolean,
    created_at datetime,
    last_active datetime 

);